---
layout: post
title: "表情包下载及本地管理的技术实现"
date: 2014-11-02 16:27:15 +0800
comments: true
categories: iOS开发
---
最近在开发的过程中，涉及到了类似于微信的表情商城中表情包的下载及本地管理的功能，其实这类功能可以进行一下统一的分类，大致的流程如下：  

    从云服务器上下载内容，比如音乐，表情包之类的，下载的过程中会涉及到进度管理，下载完成之后，本地会有一份关于已下载内容的索引，方便用户对其进行查看，排序，删除等操作。  
在此，我想对于此类功能可以进行一下统一的总结和归纳，从而得到一份完整的解决方案，这样，当下次遇到同类问题的时候就可以按照这个思路迅速的做出解决方案，从而快速的用代码进行实现。  
<!-- more -->  
首先对我做这个模块的时候的思路进行一下整理：  

1. 云服务器上表情包的展示--使用UICollectionView或者UITableView。  
2. 下载表情包--NSOperation，NSOperationQueue。
3. 下载进度的展示--自定义实现的一个DownloadButton和ProgressView可以方便展示下载过程中的进度，取消下载，以及下载完成的状态。 
4. 下载进度的缓存--CoreData。 
5. 本地贴纸包的管理--UITableView，主要使用了其中的重新排序和删除功能，这个可以参看我的另外[一篇博客](http://imnic.github.io/blog/2014/10/10/bian-ji-uitableview/)，里面有详细的总结。  

在具体的实现过程中，在表情包的下载及表情包首页及详情页进度的同步问题上走了一些“弯路”，因为一开始在实现功能的时候先做的表情包的详情页面，下载使用的是CGD中的**dispatch_group_async**配合**dispatch_group_notify**来完成整个的下载任务，使用起来相当简单，但是之后在做取消下载的时候却发现，使用这种方法，官方并没有明确的可以取消任务的函数，感觉这也算是GCD中的一个小小的缺陷吧，于是最终决定放弃这种实现方式，转而采用**NSOperationQueue**配合**NSOperation**来实现，这样在取消下载任务的时候就可以向NSOperation对象发送一个cancel消息，然后在**NSOperation**的main方法中监测**isCanceled**属性，从而来实现取消下载的功能。  

同时，在使用GCD做完详情页面的表情包下载功能之后，又发现了另外一个问题：我的所有的下载开始，下载过程中以及下载完成之后的操作都揉合在详情页面的controller中实现了，整个步骤都是面向过程的，而首页中也涉及到了这些下载相关的问题，而且两者的逻辑又几乎都是一样的，同时，首页和详情页的下载进度以及下载状态又必须保持一致，因此，我感觉到了这一块整体的代码实现上存在很大的问题，因此，我决定把整个下载模块立刻进行重构，否则，如果按照这个逻辑走下去的话，一定会遇到更大的麻烦，于是我重新整理了一下思路，决定将整个模块划分为以下几个类：  

1. 下载部分--下载管理器，该类里面会引用NSOperationQueue和NSOperation的子类来进行下载任务以及取消下载，同时也会引用下面的文件管理器和进度管理器来协调工作。  
2. 文件管理--文件管理器，这个类专门用于创建及管理和表情相关的文件夹和文件。  
3. 进度管理--进度管理器，这个类专门用于管理表情的下载进度，具体的缓存使用CoreData来实现。  

同时所有的这些类都采用单例模式创建成单例，这样就能保证下载过程中首页及详情页所有的数据都是统一的。  

而对于本地包的管理，我采用的方式是，当一个表情包下载完成之后，就在本地表情包的文件夹中的一个Index文件中（该文件中写的其实是一个NSMutableArray），然后将该表情包的信息作为一个NSDictionary来作为一个改Array中的一个元素存入其中，这样所有的信息都可以很完整的进行展示以及对其进行编辑，比如删除和排序只需要对该Array进行重新排序和删除元素后然后重新写入文件中即可。  

**启发：**  
1. 在面对一个问题的时候一定要对即将要解决的问题进行以下详细的分解，分解的越详细越好，这样在具体做的过程中能对自己的任务有一个非常直观的认识：我要做的整个任务是多大的一个任务？我做到哪一步了？做到哪一步遇到了问题？这个问题能被很好的解决吗？如果不能解决那要怎么改变思路？这样能慢慢的培养成一个良好的思路，以后无论遇到任何问题，都能够使用这种方法来稳下心来一步步的解决。   
2. 在写代码之前，一定要对代码进行架构，而不是实现了一部分再去思考，一个良好的架构会使得代码越写越顺利，而如果你发现你写的代码，需要花上很长的时间去不断的修修补补，那基本上可以确定，你之前的某个步骤或者架构一定是出现了一些问题。   
3. 之前一直对面向对象这个概念理解的不是很透彻，这次做这个模块又有了一些深入的认识，最大的感触就是尽量的把你要做的功能给抽象化，看看能不能抽象出几个具体的类来，然后让每一个类都各司其职，只专注做某一块任务。  


