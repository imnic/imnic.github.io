<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Nic]]></title>
  <link href="http://imnic.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://imnic.github.io/"/>
  <updated>2015-01-21T11:50:19+08:00</updated>
  <id>http://imnic.github.io/</id>
  <author>
    <name><![CDATA[Nic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《Core Python Programming》读书笔记--Get Started]]></title>
    <link href="http://imnic.github.io/blog/2015/01/21/%3C%3Ccore-python-programming%3E%3E-du-shu-bi-ji-get-started/"/>
    <updated>2015-01-21T10:57:02+08:00</updated>
    <id>http://imnic.github.io/blog/2015/01/21/<<core-python-programming>>-du-shu-bi-ji-get-started</id>
    <content type="html"><![CDATA[<ol>
<li><p>python文件是以 .py 为后缀名的。</p></li>
<li><p>在执行 python 文件的时候可以在terminal中使用命令行 python hello.py这样的方式，也可以在python元文件的首行添加上#!/usr/bin/env python这样的注释行，这样做其实是在告诉系统python解释器的位置，这样在执行 python 脚本的时候，就可以直接使用./hello.py的方式来直接执行。</p></li>
<li><p>Python 中使用 ＃ 来表示注释，多行注释可以在每一行的开头使用一个 #。</p></li>
<li><p>Python 中使用 print 进行格式化输出时不需要加逗号，而如果print输出之后，还有一个表达式的话，那就需要加上逗号。</p></li>
<li><p>Python 中不需要对各种基本类型变量进行定义。</p></li>
<li><p>Python 中可以使用&#8217;&lsquo;或&#8221;&ldquo;者来表示字符串，但是两者不能混用。</p></li>
<li><p>当你需要在print中输出&#8221;&ldquo;的时候，你需要加上\转义符。</p></li>
<li><p>当你需要输出多行的时候你可以使用&#8221;&ldquo;&rdquo; &ldquo;&rdquo;&ldquo;来进行输出。</p></li>
<li><p>你可以使用 pydoc 方法名来查阅一个函数的文档。例如：pydoc raw_input()。</p></li>
<li><p>python 中的函数并不需要明确的指明返回类型，如果没有返回值，那么将会默认的返回一个NULL。</p></li>
<li><p>python 中的函数的参数并不需要明确的指出其参数类型。</p></li>
<li><p>python 并不支持像其他语言中的 &ndash;n 或者 ++n 之类的自加或者自减运算符，python只会将其当作普通的一元运算符来代替。</p></li>
<li><p>python 中的代码块并没有类似其他语言的{}，而是用缩紧来代表一个代码块。</p></li>
<li><p>python 中的 for 语句更像是其他语言中的 foreach。</p></li>
<li><p>print 语句会默认的在每一条输出语句后面加上一个换行符，如果不想使用这个功能，那么我们可以在print语句后加上一个逗号（,）。</p></li>
<li><p>同 Objective-C 不太一样，格式化输出的时候，并不需要在 print 语句的后面加上逗号用于分割变量。</p></li>
<li><p>虽然python中没有像其他语言中那样的for循环，但是我们可以使用 for item in [0,1,2] 或者 for item in range(3) 这样的方式来取得同样的效果。</p></li>
<li><p>python 中的求幂运算符为(**)。</p></li>
<li><p>python 中使用 def 关键字来定义一个函数。</p></li>
<li><p>python 中的 <strong>init</strong>() 默认会被提供，并且在类的实例被创造出来之后会被调用，我们可以将其当作是一个构造函数，但是同其他语言中的构造函数并不相同，<strong>init</strong>() 函数并不创建实例对象，他只是在实例对象创建完成之后会首先被调用，我们可以重载该函数，然后在函数中对创建出来的实例变量的属性进行赋值。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
