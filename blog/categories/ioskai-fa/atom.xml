<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios开发 | Nic]]></title>
  <link href="http://imnic.github.io/blog/categories/ioskai-fa/atom.xml" rel="self"/>
  <link href="http://imnic.github.io/"/>
  <updated>2014-11-07T18:55:32+08:00</updated>
  <id>http://imnic.github.io/</id>
  <author>
    <name><![CDATA[Nic]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming With Objective-C]]></title>
    <link href="http://imnic.github.io/blog/2014/11/07/programming-with-objective-c/"/>
    <updated>2014-11-07T14:37:09+08:00</updated>
    <id>http://imnic.github.io/blog/2014/11/07/programming-with-objective-c</id>
    <content type="html"><![CDATA[<p>Objective-C(以下简称OC)是C语言的超集，OC中添加了面向对象以及动态运行时的特性，它继承了C的语法特性，简单类型，以及控制条件，并添加了定义类和方法的语法。同时也对于对象图的管理和literal syntax上添加了语言级的支持，包括动态绑定以及推迟尽可能多的职责到运行时。</p>

<!-- more -->


<p><strong>Defining classes</strong></p>

<p>什么是对象呢？对象一组数据以及与与该组数据行为有关的一个package。<br/>
什么是类呢？类就是对象的一个蓝图或者模版，我们可以按照模版这个生成对象。<br/>
当你自己自定义一个类的时候，你应该考虑到哪些属性是允许被公开访问的，这些属性可以被改变吗？其他的一些对象怎么跟你的对象进行交互。<br/>
类本身也是一种类型为Class的对象。</p>

<p><strong>Working with objects</strong></p>

<p>NSLog中的的%@用来表示一个对象，在运行时，该表示符会被该对象调用description方法返回的对象替代，descrption是NSObject中的一个方法，它是用来获取该对象的类以及内存地址的，但是很多Cocoa和Cocoa Touch类会重载该方法，从而返回一些更有用的信息，比如NSString 就会返回该字符串所代表的具体字符。</p>

<p> self其实是指向某个对象自身的一个指针，super通常用来表示某个对象调用父类中的方法，最常用的使用场景是当你需要在子类中重载某一个函数的时候。</p>

<p> 当你想要创建一个对象的时候通常你第一件事是开辟足够的空间，当然不仅仅是为当前类的属性，同时也要为他所有父类中的属性开辟空间，而＋alloc方法正是做这件事儿的，同时＋alloc还有另外一件非常重要的事情要做，那就是清空它所开辟的内存空间，也就是将这块内存空间全部置为0。而init方法则是确保该对象中的属性在创建的时候都有正确的初始值。</p>

<p> 当你创建一个对象的时候，如果不需要在初始化的时候传递参数，那么你可以使用new方法，这跟[[Object alloc] init］是一样的。</p>

<p> 某些类的对象可以才用Literals提供的一种更简洁的对象创建方式：<br/>
 <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString &lt;em>someString = @&ldquo;Hello, World!&rdquo;;</span></code></pre></td></tr></table></div></figure>
 这其实跟：<br/>
  <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString &lt;/em>someString = [NSString stringWithCString:&ldquo;Hello, World!&rdquo; encoding:NSUTF8StringEncoding];</span></code></pre></td></tr></table></div></figure>
效果是一样的。</p>

<p>类似的还有:<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber &lt;em>myBOOL = @YES;&lt;br/>
</span><span class='line'>NSNumber &lt;/em>myFloat = @3.14f;&lt;br/>
</span><span class='line'>NSNumber &lt;em>myInt = @42;&lt;br/>
</span><span class='line'>NSNumber &lt;/em>myLong = @42L;&lt;br/></span></code></pre></td></tr></table></div></figure></p>

<p> 对于指针来说，＝＝用于测试两个指针指向的是否是同一个地址，如果想要测试两个对象代表的是否是相同的数据，那么就使用isEqual方法，而对于NSNumber,NSDate,NSString对象，在比较的时候不能使用>和&lt;，而应该采用compare方法。</p>

<p> 对于基本变量，在声明的时候最后初始化，因为他们可能包含之前stack中的垃圾。而对于对象指针则没有必要，因为编译器会自动将它们置为nil如果你没有赋初值的话，在OC中对于nil发送消息是安全的，事实上，这什么也不会发生，而如果你对于一个nil变量发送消息来return，那么对于对象类型返回nil，对于数字类型返回0，对于bool型返回NO,而对于结构体则所有的内存空间都为0.</p>

<p> 对于对象变量，如果为nil，那么他的逻辑值则为0（false），反之为true。</p>

<p><strong>Encapsulating Data</strong></p>

<p>面向对象编程中一个主要的原则是封装性，因此我们应该使用一个类暴露给我们的接口来访问该类内部的值，而不是试图通过直接获取类内部的值。</p>

<p>对于readonly类型的属性，编译器并不会自动生成setter方法。</p>

<p>默认情况下，一个readwrite属性被一个实例变量所支持的，而该实例变量的名字跟属性的名字是一样的，只不过前面多了一个下划线。</p>

<p>实例变量的内存是在一个类调用alloc方法的时候，是在该对象被dealloc的时候销毁的。</p>

<p>通常情况下，你应该使用self. 或者[self setXXX:]的方式来访问一个该类的属性。</p>

<p>当然你也可以给一个属性所对应的变量取一个别名，例如：@synthesize firstName = ivar_firstName;这样的话，该属性的setter和getter使用的名字仍然是firstName，而实例变量采用的名字则是ivar_firstName，而你最好不要使用@synthesize firstName这样的，因为这样的话，实例变量的名字就跟属性的名字是一样的了。</p>

<p>最好的方式是任何时候当你想追踪一个值或者对象的话，都使用属性，当然你也可以直接声明一个实例变量，最好带上下划线。</p>

<p>初始化的时候，你应该直接使用实例变量，因为在属性设置的时候，该对象可能还没有完全初始化。</p>

<p><strong> <em>atomic VS nonatomic</em> </strong></p>

<p>atomic是默认的属性修饰符。对于atomic修饰的属性，可以保证同一时刻某个属性的setter和getter方法都能够完整的执行而不会被打断，atomic本身就是原子性的意思，对于多线程而言，这意味着如果两个线程都对执行同一个属性执行setter方法，那么同一时间只能等待一个线程中该属性的setter执行完毕后，另一个线程中该属性的setter才能继续执行，当然对于getter也是同样的道理，但是，这并不意味着atomic修饰的属性是线程安全的，比如某一个对象包含firstName和lastName两个属性，然后，我在线程A上对该对象的firstName和lastName执行setter方法，与此同时，我在线程B上对该对象的firstName和lastName同时执行getter方法，这样处理之后得到的fullName就不一定是正确的了，因为有可能出现的情况时，firstName的获取是在线程A中firstName的setter方法执行前，而lastName的获取则是在线程A中lastName的setter执行后，这就有可能导致错误的姓名搭配。</p>

<p>而对于nonatomic修饰的属性，则不保证setter和getter操作是原子的，它只是简单的set或者返回一个值，并不保证同一个属性在不同的线程中进行访问的话会出现什么情况，换句话说，每个线程在执行setter的时候，都不会关心其他线程正在做什么，它只是简单的获取到当前要进行访问的变量，然后对其进行set或者返回值，比如两个线程都对Person类中的age进行+1操作，那么两者本来应该＋2，但可能最终的结果仍然是＋1。</p>

<p>由于上述原因，当你在访问nonatomic属性的时候，速度要比atomic属性更快一些。</p>

<p>另外，sythesized accessors的实现是私有的，因此对于atomic类型的属性，你不能自己实现setter，否则你将会得到一个警告。</p>

<p><strong> <em>Memory</em> </strong></p>

<p>当在考虑内存的问题的时候，你应该从引用的角度去考虑，如果一个对象始终被另外一个对象所引用，那么他所占用的内存就永远不会释放。而对于内存问题，两个比较容易出现的问题就是：</p>

<ol>
<li>正在使用的内存已经被释放。</li>
<li>内存已经不使用了，但是没有释放，导致内存泄漏。</li>
</ol>


<p>同时，你应该避免循环引用的出现，其实就是，一个对象A对另一个对象B保持强引用，同时，该B也对A保持强引用，这样，即便这个group的外界对两者都没有引用关系了，两者因为互相保持引用而没办法释放内存，导致内存泄漏。</p>

<p>__srong 是默认的变量修饰符，不用显示说明。</p>

<p>对于无法使用weak的环境，你应该使用__unsafe_unretained来修饰变量，这个修饰符的功能跟weak类似，唯一的区别就是它并不会在该内存已经被释放的时候将该指针设置为nil，因此该指针就变成了悬垂指针，而对一个悬垂指针发送消息有可能会导致程序崩溃，这也就是unsafe的原因。</p>

<p><strong>Customing Existing Classes</strong></p>

<p>你可以对任何一个类添加categories，包括自定义类和cocoa touch的类，添加之后所有该类以及该类的子类都可以调用添加的方法，事实上在运行时，在一个类的category中添加的方法和该类本身的方法是没有任何区别的。</p>

<p>你不仅可以使用categories向已有类中添加方法，你也可以使用categories来将一个复杂类的逻辑分散到各个不同的实现文件中去。</p>

<p>你可以使用categories来向类中添加方法，但是你最好不要使用categories来添加属性，因为虽然语法上没有什么错误，但是你并不能在categories中声明实例变量，这也就意味着编译器既不会sythesize实例变量，也不会sythesize出getter和setter方法，虽然你可以手动添加getter和setter方法，但你却无法追踪实例变量的值，除非它已经存储在已有类中。而这样的功能可以通过extension来实现。</p>

<p>在使用categoty的时候，应该尽量避免名字冲突的问题，事实上，对于你自己的定义的类可能会很少出现category中的方法名跟该类中的方法名一样的情况，但是对于cocoa touch中的方法，如果一旦名字发生冲突，那么在运行时具体执行哪个方法是不明确的，这就有可能导致问题的出现，最好的办法是在你添加的方法中添加一个前缀和下划线，类似：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface NSSortDescriptor (XYZAdditions)
</span><span class='line'>+ (id)xyz_sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending;
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure></p>

<p>Extension通常被称作是匿名类，它跟category的作用类似，但不同的是：</p>

<ol>
<li>它只能添加到source code中，而它的具体实现则是在@implementation中，这也就意味着你不能对cocoa的类添加extension。</li>
<li>你可以在其中添加实例变量和属性就如同正常类中添加的一样，编译器会自动合成相应的实例变量，getter以及setter方法。</li>
</ol>


<p>一个类的interface中，我们通常声明一些可以共其他类来访问和调用的属性和方法，换句话说，在一个类的interface中，我们暴露的是公开的信息，通常我们可以使用Class Extension来隐藏私有变量和私有方法。</p>

<p>我们可以在interface中定义一个readonly的属性，然后在extension中将其重新定义为readwrite的，这样的话，在类的内部，我们就可以对其read和write，而在类的外部，也就是其他的对象不能对其进行set，这样就很好的实现了封装性。</p>

<p>同时你也可以考虑其他的一些替代方法用于Class Customization:</p>

<ol>
<li>设计一个子类。</li>
<li>使用delegate，这个其实是将决策权放到运行时，比如UITableView，为了实现重用就使用了delegate。</li>
<li>直接使用OC的runtime，OC可以在runtime system中使用动态的行为，例如我们可以使用 Associative References，但是跟使用extension不同的是，使用这种方法并不会影响任何的原始类的定义和实现，这也就意味着对于那些framework中你没有权限访问的代码你可以使用这种方法， Associative References会将一个对象跟另一个对象关联起来，有点像属性或者实例变量。</li>
</ol>


<p><strong>Working with Protocols</strong></p>

<p>与类相反，protocol是用来声明独立于任何特定的class的属性和方法的，其中既可以包含类方法，也可以包含实例方法，同时也能包含属性。</p>

<p>和类一样，你的protocol也可以继承另外一个protocol，这样的话，意味着所有adopt你的protocol的类，也同样adopt该protocol中的方法。</p>

<p>当你发现你的某一个类adopting非常多的协议，那可能意味着将这个类按照责任去重构成比较小的类了。</p>

<p>我们常见的datasource和delegate本质上是一样的，只不过分工不同。</p>

<p>protocols可以用作匿名，比如，有些时候你并不知道一个对象的类型或者说这个类型需要保持隐藏状态。</p>

<p>这样的话，使用protocols，即使你不知道某个对象是什么类型的，你也能明确的知道该类能响应某个方法，从而去调用该方法。</p>

<p><strong>Values and Collections</strong></p>

<p>在使用Cocoa编程过程中，尽量使用NSInteger,NSUInteger,CGFloat这样的类型，因为这样可以使得代码的兼容性更好，因为这样的变量在定义的时候会根据具体的环境是32位还是64位来定，而对于局部变量，例如for循环中的counter，在你知道counter的值在限制范围内的时候，你可以使用C中的基本类型。</p>

<p>NSNumber 也可以使用 Literal syntax的方式来创建：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber &lt;em>magicNumber = @42;
</span><span class='line'>NSNumber &lt;/em>unsignedNumber = @42u;
</span><span class='line'>NSNumber &lt;em>longNumber = @42l;
</span><span class='line'>NSNumber &lt;/em>boolNumber = @YES;
</span><span class='line'>NSNumber &lt;em>simpleFloat = @3.14f;
</span><span class='line'>NSNumber &lt;/em>betterDouble = @3.1415926535;
</span><span class='line'>NSNumber *someChar = @&rsquo;T';</span></code></pre></td></tr></table></div></figure></p>

<p> NSNumber是NSValue的子类，NSValue可以用来存放指针和结构体，例如：<br/>
 <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString &lt;em>mainString = @&ldquo;This is a long string&rdquo;;
</span><span class='line'>NSRange substringRange = [mainString rangeOfString:@&ldquo;long&rdquo;];
</span><span class='line'>NSValue &lt;/em>rangeValue = [NSValue valueWithRange:substringRange];</span></code></pre></td></tr></table></div></figure></p>

<p>所有的集合类，例如NSArray都会对其内容保持强引用。</p>

<p>NSArray中的元素，不是必须都是同样的类型。</p>

<p>当你想要在集合存放一个空指针的时候，你应该使用NSNull类型，而不是nil，事实上，使用nil，就会导致异常，NSNull是一个单例类。</p>

<p>NSSet和NSArray类似，唯一的区别是NSSet是无序集合，所以在测试membership的时候，NSSet会有性能提升。</p>

<p>NSDictionary的键也可以使用除了NSString类型之外的其他类型，但是由于NSDictionary会对每一个key做一份copy，这样你就得保证你使用的key必须支持NSCopying协议。</p>

<p>对于NSArray和NSDictionary你可以使用writeToURL将其持久化到本地磁盘中，同时如果其中的每一个元素都是property list types（例如，NSArray,NSDictionay,NSString,NSNumber,NSDate,NSData,NSNumber），你可以通过arrayWithContentsOfURL方法重新创建。</p>

<p>而如果你想持久化其他类型而不是property list types，那么你可以使用NSKeyedArchiver来创建archive来collected objects，但你要集合中的每一个元素都支持NSCoding协议，这也就意味着每一个元素都必须知道如何encode itself（通过实现encodeWithCoder:），并且知道如何从已知的archive中decode itself（通过实现initWithCoder:）。</p>

<p>事实上，如果你使用Interface Builder的来布局windows和views的话，那么最终的nib文件只不过是一个你使用视觉化的创建方式创建的层级结构的archive，而在运行时，这个nib文件就会使用相关类unarchive成层级结构。</p>

<p>虽然你可以使用for循环的方式来枚举collection中的每一个元素，但最好的方式是通过使用：<br/>
 <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (&lt;Type> &lt;variable> in &lt;collection>) {
</span><span class='line'>        &hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>多数的集合也支持Enumerator Objects,使用方法如下：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (id eachObject in [array reverseObjectEnumerator]) {
</span><span class='line'>        &hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>id eachObject;
</span><span class='line'>while ( (eachObject = [enumerator nextObject]) ) {
</span><span class='line'>        NSLog(@&ldquo;Current object is: %@&rdquo;, eachObject);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>多数的集合也支持Block-Based Enumeration。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于技术学习的一些感悟]]></title>
    <link href="http://imnic.github.io/blog/2014/11/07/Learning/"/>
    <updated>2014-11-07T14:31:59+08:00</updated>
    <id>http://imnic.github.io/blog/2014/11/07/Learning</id>
    <content type="html"><![CDATA[<p>做iOS开发这么久了，一直以来都在不断的接触新的知识，但是总感觉自己的知识是零散而不成体系的，想来想去，感觉大概是跟自己一直以来的学习方式有关，因为之前的很长一段时间内，我在遇到新的知识或问题的时候，总是第一时间倾向于上google，stackoverflow去找相关的资料，但这其实是一种很不好的习惯，因为这很不利于培养自己独立解决问题的能力。</p>

<p>而事实上，最好的学习资料永远是官方文档，网上的那些资料难免会因为作者自己当时的理解不到位而跟官方文档实际所表达的意思相比有所偏差，甚至有一些资料完全就是误人子弟，当然，网上的一些知名开发者写的博客还是非常值得学习的，而且对于那些你自己很长一段时间内理解不透的东西，可能别人的一句话，你就瞬间理解了其中的原理。所以，在遇到新的知识或者问题，最好的习惯永远是先尝试查阅官方文档，并且Apple本身就某一个知识点通常也有非常全面的Programming Guide，而网上的一些blog之类的资料可以作为一个辅助的学习资料，比如在遇到问题时，看了官方文档之后还是稀里糊涂或者某个比较奇怪的问题在官方文档无法找到答案时，这个时候可以尝试上网上去查一下别人对于这个问题是怎么理解的，或者怎么解决的，别人的整体思路是怎么样的，这样的话，你才会对这个问题的理解更为深刻，虽然可能当时在解决某一个问题的时候会花费很多的时间，但当问题解决之后，你一定会对此问题有一个非常深刻理解，此时可以再写一篇博客来加深你对于该问题的理解，这样的话下次再遇到同样的问题的时候，你就可以迅速的解决问题，这样就能形成一个非常好的良性循环，而如果每次都是贪图一时之快而去网上找一些现成的解决方案或者资料的话，你会发现无论同一个问题遇到多少次，你都会对它感觉到如此的陌生，因为这些知识从来都不是属于你自己的。</p>

<p>所以，我决定将自己关于iOS开发方面的知识整理成一个系列，这样的话，对于那些自己以前理解的不到位或者模棱两可的地方，可以通过学习文档，有一个新的认识，而对于那些之前没有接触过的知识，可以通过查阅官方的Programming Guide来进行一个全方位的深入学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[表情商城技术实现]]></title>
    <link href="http://imnic.github.io/blog/2014/11/02/tie-zhi-bao-de-xia-guan-li/"/>
    <updated>2014-11-02T16:27:15+08:00</updated>
    <id>http://imnic.github.io/blog/2014/11/02/tie-zhi-bao-de-xia-guan-li</id>
    <content type="html"><![CDATA[<p>最近在开发的过程中，涉及到了类似于微信的表情商城中表情包的下载及本地管理的功能，其实这类功能可以进行一下统一的分类，大致的流程如下：</p>

<p><strong>从云服务器上下载内容，比如音乐，表情包之类的，下载的过程中会涉及到进度管理，下载完成之后，本地会有一份关于已下载内容的索引，方便用户对其进行查看，排序，删除等操作。</strong></p>

<p>在此，我想对于此类功能可以进行一下统一的总结和归纳，从而得到一份完整的解决方案，这样，当下次遇到同类问题的时候就可以按照这个思路迅速的做出解决方案，从而快速的用代码进行实现。</p>

<!-- more -->


<p>
首先对我做这个模块的时候的思路进行一下整理：</p>

<ol>
<li>云服务器上表情包的展示&ndash;使用UICollectionView或者UITableView。</li>
<li>下载表情包&ndash;NSOperation，NSOperationQueue。</li>
<li>下载进度的展示&ndash;自定义实现的一个DownloadButton和ProgressView可以方便展示下载过程中的进度，取消下载，以及下载完成的状态。</li>
<li>下载进度的缓存&ndash;CoreData。</li>
<li>本地贴纸包的管理&ndash;UITableView，主要使用了其中的重新排序和删除功能，这个可以参看我的另外<a href="http://imnic.github.io/blog/2014/10/10/bian-ji-uitableview/">一篇博客</a>，里面有详细的总结。</li>
</ol>


<p>在具体的实现过程中，在表情包的下载及表情包首页及详情页进度的同步问题上走了一些“弯路”，因为一开始在实现功能的时候先做的表情包的详情页面，下载使用的是CGD中的<strong>dispatch_group_async</strong>配合<strong>dispatch_group_notify</strong>来完成整个的下载任务，使用起来相当简单，但是之后在做取消下载的时候却发现，使用这种方法，官方并没有明确的可以取消任务的函数，感觉这也算是GCD中的一个小小的缺陷吧，于是最终决定放弃这种实现方式，转而采用<strong>NSOperationQueue</strong>配合<strong>NSOperation</strong>来实现，这样在取消下载任务的时候就可以向NSOperation对象发送一个cancel消息，然后在<strong>NSOperation</strong>的main方法中监测<strong>isCanceled</strong>属性，从而来实现取消下载的功能。</p>

<p>同时，在使用GCD做完详情页面的表情包下载功能之后，又发现了另外一个问题：我的所有的下载开始，下载过程中以及下载完成之后的操作都揉合在详情页面的controller中实现了，整个步骤都是面向过程的，而首页中也涉及到了这些下载相关的问题，而且两者的逻辑又几乎都是一样的，同时，首页和详情页的下载进度以及下载状态又必须保持一致，因此，我感觉到了这一块整体的代码实现上存在很大的问题，因此，我决定把整个下载模块立刻进行重构，否则，如果按照这个逻辑走下去的话，一定会遇到更大的麻烦，于是我重新整理了一下思路，决定将整个模块划分为以下几个类：</p>

<ol>
<li>下载部分&ndash;下载管理器，该类里面会引用NSOperationQueue和NSOperation的子类来进行下载任务以及取消下载，同时也会引用下面的文件管理器和进度管理器来协调工作。</li>
<li>文件管理&ndash;文件管理器，这个类专门用于创建及管理和表情相关的文件夹和文件。</li>
<li>进度管理&ndash;进度管理器，这个类专门用于管理表情的下载进度，具体的缓存使用CoreData来实现。</li>
</ol>


<p>同时所有的这些类都采用单例模式创建成单例，这样就能保证下载过程中首页及详情页所有的数据都是统一的。</p>

<p>而对于本地包的管理，我采用的方式是，当一个表情包下载完成之后，就在本地表情包的文件夹中的一个Index文件中（该文件中写的其实是一个NSMutableArray），然后将该表情包的信息作为一个NSDictionary来作为一个改Array中的一个元素存入其中，这样所有的信息都可以很完整的进行展示以及对其进行编辑，比如删除和排序只需要对该Array进行重新排序和删除元素后然后重新写入文件中即可。</p>

<p><strong>启发：</strong><br/>
1. 在面对一个问题的时候一定要对即将要解决的问题进行以下详细的分解，分解的越详细越好，这样在具体做的过程中能对自己的任务有一个非常直观的认识：我要做的整个任务是多大的一个任务？我做到哪一步了？做到哪一步遇到了问题？这个问题能被很好的解决吗？如果不能解决那要怎么改变思路？这样能慢慢的培养成一个良好的思路，以后无论遇到任何问题，都能够使用这种方法来稳下心来一步步的解决。 <br/>
2. 在写代码之前，一定要对代码进行架构，而不是实现了一部分再去思考，一个良好的架构会使得代码越写越顺利，而如果你发现你写的代码，需要花上很长的时间去不断的修修补补，那基本上可以确定，你之前的某个步骤或者架构一定是出现了一些问题。 <br/>
3. 之前一直对面向对象这个概念理解的不是很透彻，这次做这个模块又有了一些深入的认识，最大的感触就是尽量的把你要做的功能给抽象化，看看能不能抽象出几个具体的类来，然后让每一个类都各司其职，只专注做某一块任务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView的编辑－－删除，插入及重新排序]]></title>
    <link href="http://imnic.github.io/blog/2014/10/10/bian-ji-uitableview/"/>
    <updated>2014-10-10T16:25:42+08:00</updated>
    <id>http://imnic.github.io/blog/2014/10/10/bian-ji-uitableview</id>
    <content type="html"><![CDATA[<p>这两天在开发表情商城的过程中，涉及到了已下载表情包的管理，因此自然想到使用 UITableView 来实现相关的功能，在此，对 UITableView 的编辑－－删除及重新排序进行一下简单的总结和归纳：</p>

<!-- more -->


<h2><strong>删除/插入Cell：</strong></h2>

<p>相关函数：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setEditing:(BOOL)editing animated:(BOOL)animated;
</span><span class='line'>- (BOOL)tableView:(UITableView &lt;em>)tableView canEditRowAtIndexPath:(NSIndexPath &lt;/em>)indexPath;
</span><span class='line'>- (void)tableView:(UITableView &lt;em>)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath &lt;/em>)indexPath;
</span><span class='line'>- (void)insertRowsAtIndexPaths:(NSArray &lt;em>)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
</span><span class='line'>- (void)deleteRowsAtIndexPaths:(NSArray &lt;/em>)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
</span><span class='line'>- (void)beginUpdates;
</span><span class='line'>- (void)endUpdates;</span></code></pre></td></tr></table></div></figure></p>

<p>具体的流程可以参照下图：</p>

<p><img src="http://imnicblogphotos.qiniudn.com/table_view_editing.jpg" alt="table_view_editing" /></p>

<p>下面就这个流程图详细的解释一下：</p>

<h3>方法一：</h3>

<ol>
<li><p>用户点击编辑按钮时，此时分两种情况：</p>

<ul>
<li><p>我们可以给tableView发送 setEditing:animated: 消息。</p></li>
<li><p>当ViewController可以manage一个tableView时，比如，UITableViewController,或者在一个UIViewController中的loadView方法中，直接将一个tableView作为controller的view的情况下，当我们点击Navigation Bar上的Edit Button的时候，controller则会自动发送该消息给tableView。</p></li>
</ul>
</li>
<li><p>当tableView收到 setEditing:animated: 消息之后,tableView会掉用 tableView:canEditRowAtIndexPath: 方法，来进一步的确定哪些rows可以被编辑。补充：</p>

<ul>
<li><p>你也可以不实现该方法，在这种情况下，所有的rows都将可以被编辑。</p></li>
<li><p>而那些被指定了不能被编辑的rows将会忽略掉UITableViewCell的 editingStyle属性，当然也不会在处于编辑状态时向后缩进。</p></li>
<li><p>如果你想让rows可以被编辑，但是又不想显示出编辑按钮如删除或增加的话，你可以实现 tableView:editingStyleForRowAtIndexPath: 方法，然后返回 UITableViewCellEditingStyleNone 。</p></li>
</ul>
</li>
<li><p>接下来tableView会调用 tableView:editingStyleForRowAtIndexPath: 来确定编辑按钮的样式，可以是删除或者增加，当然如果你不实现该回调的话，默认的为UITableViewCellEditingStyleDelete。</p></li>
<li><p>当用户点击左侧的编辑按钮（删除或者增加）的时候，右侧会出现删除按钮，点击右侧的删除按钮则表示确认删除。</p></li>
<li><p>最后tableView会发送 tableView:commitEditingStyle:forRowAtIndexPath:给其 datasource，尽管该protocol是可选的，但是如果如果你想删除或者增加一行的话，你就必须实现该方法。在该方法中你必须做以下几件事：</p>

<ul>
<li><p>beginUpdates:当你想要在删除某一行的时候同时以动画的方式展现给用户的话，你必须要先调用该方法，该方法是跟endUpdates配对使用的，在此之间，你不能调用reloadData方法，否则，你必须自己实现动画的展现形式。</p></li>
<li><p>发送 deleteRowsAtIndexPaths:withRowAnimation: 或 insertRowsAtIndexPaths:withRowAnimation: 来展示删除。</p></li>
<li><p>更新你的 data-model，比如在array中增加或者删除object。</p></li>
<li><p>endUpdates:跟 beginUpdates 配对使用。</p></li>
</ul>


<p> <strong>注意:在endUpdates之前,如果你调用了 deleteRowsAtIndexPaths:withRowAnimation:时，
 一定记得要更新数据，比如删除新的数据在model－data中，否则应用将会崩溃，报错：<br/>
 Assertion failure in -[UITableView _endCellAnimationsWithContext:]</strong>。</p></li>
</ol>


<h3>方法二：</h3>

<p>除此之外，你也可以使用swipe-to-delete方法，但是具体的流程跟上面不太相同：</p>

<ol>
<li><p>当用户在一个cell上滑动的时候tableView会检测data source是否实现了 tableView:commitEditingStyle:forRowAtIndexPath: 方法，如果实现了的话他就会发送 setEditing:animated: 模式，然后进入编辑模式。<br/>
<strong>注意：在此方法中,你不能调用setEditing:animated:方法，如果由于某种原因必须要调用的话，你必须使用performSelector:withObject:afterDelay:方法来调用</strong>。</p></li>
<li><p>当用户开始滑动的时候会调用tableView:willBeginEditingRowAtIndexPath: ，当你点击删除或者点击空白处取消的时候则会调用 tableView:didEndEditingRowAtIndexPath:方法。</p></li>
<li><p>接下来你只需要在 tableView:commitEditingStyle:forRowAtIndexPath: 方法中实现跟上面一样的方法即可。</p></li>
</ol>


<h3>方法三：</h3>

<p>当然，你也可以不采用系统原生的编辑按钮，你可以自己在cell中自定义一个删除按钮，当用户点击删除按钮的时候，你只需要做如下的事情即可：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self.tableView beginUpdates];&lt;br/>
</span><span class='line'>[self.tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];&lt;br/>
</span><span class='line'>[self.resourceArray removeObjectAtIndex:indexPath.row];&lt;br/>
</span><span class='line'>[self.tableView endUpdates];</span></code></pre></td></tr></table></div></figure></p>

<p>当然你也可以直接：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self.resourceArray removeObjectAtIndex:indexPath.row];  &lt;br/>
</span><span class='line'>[self.tableView reloadData];</span></code></pre></td></tr></table></div></figure></p>

<p>但是这样用户体验并不好，不推荐！</p>

<p>而对于插入Cell的话，虽然我们也可以使用类似删除的系统原生方式（当tableView处于编辑模式时，点击cell左侧的编辑/插入按钮），但我们更倾向于使用在navigation bar上添加一个按钮，而具体的过程可以参照上面删除的流程。</p>

<h2><strong>重新排序</strong></h2>

<p>清楚了上面的流程之后我们在做排序的时候，我们在去做重新排序的时候就会比较简单了。<br/>
相关函数：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setShowsReorderControl:(BOOL)showsReorderControl;&lt;br/>
</span><span class='line'>- (void)setEditing:(BOOL)editing animated:(BOOL)animate;&lt;br/>
</span><span class='line'>- (BOOL)tableView:(UITableView &lt;em>)tableView canMoveRowAtIndexPath:(NSIndexPath &lt;/em>)indexPath;&lt;br/>
</span><span class='line'>- (NSIndexPath &lt;em>)tableView:(UITableView &lt;/em>)tableView targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath &lt;em>)sourceIndexPath toProposedIndexPath:(NSIndexPath &lt;/em>)proposedDestinationIndexPath&lt;br/>
</span><span class='line'>- (void)tableView:(UITableView &lt;em>)tableView moveRowAtIndexPath:(NSIndexPath &lt;/em>)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath</span></code></pre></td></tr></table></div></figure></p>

<p>具体的流程可以参照下图：</p>

<p><img src="http://imnicblogphotos.qiniudn.com/table_view_moving.jpg" alt="table_view_moving" /></p>

<p>同样的，我们对这个流程也进行一下详细的解释：</p>

<ol>
<li><p>首先，当用户点击排序按钮时，tableView进入编辑模式，这也是分两种情况：</p>

<ul>
<li><p>我们可以给tableView发送 setEditing:animated: 消息。</p></li>
<li><p>当ViewController可以manage一个tableView时，比如，UITableViewController,或者在一个UIViewController中的loadView方法中，直接将一个tableView作为controller的view的情况下，当我们点击Navigation Bar上的Edit Button的时候，controller则会自动发送该消息给tableView。</p></li>
</ul>
</li>
<li><p>当tableView收到 setEditing:animated: 消息之后，他会给data source发送tableView:canMoveRowAtIndexPath:方法，在该方法中你可以筛选出来那些cell是可以被move而哪些不可以。</p></li>
<li><p>当用户拖动某一个cell上下移动的时候，就会调用</p>

<p> tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:</p>

<p> 这个方法中，我们可以指定cell的可移动范围，比如：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSIndexPath &lt;em>)tableView:(UITableView &lt;/em>)tableView
</span><span class='line'>     targetIndexPathForMoveFromRowAtIndexPath:(NSIndexPath &lt;em>)sourceIndexPath
</span><span class='line'>     toProposedIndexPath:(NSIndexPath &lt;/em>)proposedDestinationIndexPath &lt;br/>
</span><span class='line'>{
</span><span class='line'> NSDictionary *section = [data objectAtIndex:sourceIndexPath.section];&lt;br/>
</span><span class='line'> NSUInteger sectionCount = [[section valueForKey:@&ldquo;content&rdquo;] count];&lt;br/>
</span><span class='line'> if (sourceIndexPath.section != proposedDestinationIndexPath.section) &lt;br/>
</span><span class='line'> {&lt;br/>
</span><span class='line'>     NSUInteger rowInSourceSection =&lt;br/>
</span><span class='line'>          (sourceIndexPath.section > proposedDestinationIndexPath.section) ?&lt;br/>
</span><span class='line'>            0 : sectionCount - 1;&lt;br/>
</span><span class='line'>     return [NSIndexPath indexPathForRow:rowInSourceSection   inSection:sourceIndexPath.section];&lt;br/>
</span><span class='line'> } &lt;br/>
</span><span class='line'> else if (proposedDestinationIndexPath.row >= sectionCount) &lt;br/>
</span><span class='line'> {&lt;br/>
</span><span class='line'>     return [NSIndexPath indexPathForRow:sectionCount - 1   inSection:sourceIndexPath.section];&lt;br/>
</span><span class='line'> }&lt;br/>
</span><span class='line'> // Allow the proposed destination.&lt;br/>
</span><span class='line'> return proposedDestinationIndexPath;&lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>最后，当用户松开手之后，tableView就会给data source发送 tableView:moveRowAtIndexPath:toIndexPath: 消息，在该方法中我们可以更新model－data，比如：<br/>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)tableView:(UITableView &lt;em>)tableView moveRowAtIndexPath:(NSIndexPath &lt;/em>)sourceIndexPath toIndexPath:(NSIndexPath &lt;em>)destinationIndexPath &lt;br/>
</span><span class='line'>{&lt;br/>
</span><span class='line'> NSString &lt;/em>stringToMove = [self.reorderingRows objectAtIndex:sourceIndexPath.row];&lt;br/>
</span><span class='line'> [self.reorderingRows removeObjectAtIndex:sourceIndexPath.row];&lt;br/>
</span><span class='line'> [self.reorderingRows insertObject:stringToMove atIndex:destinationIndexPath.row];&lt;br/>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p></li>
</ol>


<p><strong>注意：我们如果想要显示reorder control，就必须设置cell 的 showsReorderControl属性为YES,同时必须实现tableView:moveRowAtIndexPath:toIndexPath: 方法</strong>。</p>
]]></content>
  </entry>
  
</feed>
